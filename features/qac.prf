#global defaults
qtPrepareTool(QMAKE_QAC, qac)
isEmpty(QAC_DIR):QAC_DIR = .qac

#qac headers
qac_header.CONFIG = qac_verify
qac_header.dependency_type = TYPE_C
qac_header.commands = $$QMAKE_QAC ${QMAKE_FILE_IN} -o ${QMAKE_FILE_OUT}
qac_header.output = $$QAC_DIR/${QMAKE_FILE_BASE}_p$${first(QMAKE_EXT_H)}
qac_header.input = ANDROID_CLASSES
qac_header.variable_out = ANDROID_HEADERS
qac_header.name = QAC $${QMAKE_H_MOD_QAC}${QMAKE_FILE_BASE}_p$${first(QMAKE_EXT_H)}
silent:qac_header.commands = @echo qac ${QMAKE_FILE_IN} && $$qac_header.commands
QMAKE_EXTRA_COMPILERS += qac_header

#qac sources
qac_source.CONFIG = qac_verify
qac_source.dependency_type = TYPE_C
qac_source.commands = $$QMAKE_QAC ${QMAKE_FILE_IN} -o ${QMAKE_FILE_OUT}
qac_source.output = $$QAC_DIR/${QMAKE_FILE_BASE}$${first(QMAKE_EXT_CPP)}
qac_source.input = ANDROID_CLASSES
qac_source.variable_out = SOURCES
qac_source.name = QAC $${QMAKE_CPP_MOD_QAC}${QMAKE_FILE_BASE}$${first(QMAKE_EXT_CPP)}
silent:qac_source.commands = @echo qac ${QMAKE_FILE_IN} && $$qac_source.commands
QMAKE_EXTRA_COMPILERS += qac_source

load(moc)
qac_moc.commands = $$moc_header.commands
qac_moc.output = $$moc_header.output
qac_moc.input = ANDROID_HEADERS
qac_moc.variable_out = GENERATED_SOURCES
qac_moc.name = $${GROUP}_$$moc_header.name
QMAKE_EXTRA_COMPILERS += qac_moc

#make sure we can include these files
INCLUDEPATH += $$absolute_path($$QAC_DIR, $$OUT_PWD)

#auto depend on qac
unix:!no_qacdepend {
     qac_source.depends += $$first(QMAKE_QAC)
     qac_header.depends += $$first(QMAKE_QAC)
}

#generate a qacclean
build_pass|isEmpty(BUILDS):qacclean.depends = compiler_qac_header_clean compiler_qac_source_clean
else:qacclean.CONFIG += recursive
QMAKE_EXTRA_TARGETS += qacclean

#generate a qacables
build_pass|isEmpty(BUILDS):qacables.depends = compiler_qac_header_make_all compiler_qac_source_make_all
else:qacables.CONFIG += recursive
QMAKE_EXTRA_TARGETS += qacables
